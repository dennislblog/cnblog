<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on My Site Title</title>
    <link>https://dennislblog.github.io/</link>
    <description>Recent content in Home on My Site Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Jun 2017 18:27:58 +0100</lastBuildDate>
    
	<atom:link href="https://dennislblog.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Market Game Analysis</title>
      <link>https://dennislblog.github.io/2020/06/thesis-intro/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/06/thesis-intro/</guid>
      <description>Reference [1] Avellaneda, M., &amp;amp; Stoikov, S. (2008). High-frequency trading in a limit order book. Quantitative Finance, 8(3), 217-224.</description>
    </item>
    
    <item>
      <title>MM with Adversarial RL</title>
      <link>https://dennislblog.github.io/2020/05/robust-market-making-via-adversarial-reinforcement-learning/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/robust-market-making-via-adversarial-reinforcement-learning/</guid>
      <description>Summary 产生了自发的风险规避行为? 怎么证明的? MM表现(怎么定义?)更好 通过比较在fixed env setting 和 strategic adversarial env setting 上MM的表现 Robust to 模型不确定性 什么是做市商</description>
    </item>
    
    <item>
      <title>PPO Algorithm</title>
      <link>https://dennislblog.github.io/2020/05/proximal-policy-optimization-algorithms/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/proximal-policy-optimization-algorithms/</guid>
      <description>连续控制问题, 来自Katerina Fragkiadaki课件&amp;lt;Natural Policy Gradients, TRPO, PPO&amp;gt; Policy Gradient 我一直有一个疑问, 怎么优化函数, 使得函数的输出</description>
    </item>
    
    <item>
      <title>强化学习笔记</title>
      <link>https://dennislblog.github.io/2020/05/_reinforce-learn/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/_reinforce-learn/</guid>
      <description>Some Interesting Imitation Learning Repo pedronahum NoiseInjection: provide examples of how noise injection may be used to improve off-policy imitation learning by mitigating covariate shift. KuoHaoZeng Behaviour Cloning: adopt the idea of uncertainty regularization [1] to learn a swing-up policy via behaviour cloning without interacting with the simulator. Tsu-Jui Fu pytorch_bco A PyTorch implementation of Behavioral Cloning from Observation (BCO) MRYingLEE Trading_by_Imitation_Learning collect 16 stocks history datasets, use CNN or</description>
    </item>
    
    <item>
      <title>Python内置函数</title>
      <link>https://dennislblog.github.io/2020/05/_python-learn/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/_python-learn/</guid>
      <description>Function Example Explanation divmod divmod(5.5,2) =&amp;gt; (2.0, 1.5) min min(&#39;1234&#39;) =&amp;gt; &amp;lsquo;1&amp;rsquo; min(-1,-2,key = abs) =&amp;gt; -1 传入一个可迭代对象 pow pow(2,3) =&amp;gt; 2**3 pow(2,3,5) =&amp;gt; pow(2,3)%5 sum sum((1,2,3,4),-10) =&amp;gt; 0 传入可迭代，元素类型必须是数值型 bool bool([]) =&amp;gt; False 数值0，空序列等为Fals</description>
    </item>
    
    <item>
      <title>Tensorboard</title>
      <link>https://dennislblog.github.io/2020/05/_tensorboard/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/_tensorboard/</guid>
      <description>调用方法 1 import torch 2 from torch.autograd import Variable 3 from torch.utils.tensorboard import SummaryWriter 4 5 writer = SummaryWriter(comment=&amp;#34;-test&amp;#34;) 6 with writer: //保证writer调用完关掉 7 writer.method() 8 writer.export_scalars_to_json(&amp;#34;./test.json&amp;#34;) //把scalar信息保存到文件 add_scalar() 在一个图表中记录一</description>
    </item>
    
    <item>
      <title>基本入门</title>
      <link>https://dennislblog.github.io/2020/05/_intro/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/_intro/</guid>
      <description>基础配置 CUDA/GPU运算 1 torch.cuda.get_device_name(0) //&amp;#39;GeForce GTX 1060&amp;#39; 2 torch.cuda.is_available() //判断 GPU 支持 固定随机种子 1 torch.manual_seed(0) 2 torch.cuda.manual_seed_all(0) 3 torch.backends.cudnn.deterministic = True //去除随机性？ 清除GPU存储 1 torch.cuda.empty_cache() //有时Ctrl + C中</description>
    </item>
    
    <item>
      <title>VC维的理解</title>
      <link>https://dennislblog.github.io/2020/05/_vc-dimension/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2020/05/_vc-dimension/</guid>
      <description>学习的过程 机器学习的过程就是：通过算法 $\mathcal{A}$，在假设空间 $\mathcal{H}$ 中，根据训练样本集 $\mathcal{D}$，选择最好的假设作</description>
    </item>
    
    <item>
      <title>Cupper Shortcodes</title>
      <link>https://dennislblog.github.io/2019/02/cupper-shortcodes/</link>
      <pubDate>Tue, 12 Feb 2019 23:39:06 -0600</pubDate>
      
      <guid>https://dennislblog.github.io/2019/02/cupper-shortcodes/</guid>
      <description>blockquote {{&amp;lt; blockquote author=&amp;quot;Carl Jung&amp;quot; &amp;gt;}} Even a happy life cannot be without a measure of darkness, and the word happy would lose its meaning if it were not balanced by sadness. It is far better to take things as they come along with patience and equanimity. {{&amp;lt; /blockquote &amp;gt;}} Even a happy life cannot be without a measure of darkness, and the word happy would lose its meaning if it were not balanced by sadness.</description>
    </item>
    
    <item>
      <title>动手深度学习</title>
      <link>https://dennislblog.github.io/2014/04/_cook-book/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dennislblog.github.io/2014/04/_cook-book/</guid>
      <description>预备知识 Tensor on GPU 用torch.cuda.get_device_name(0)查看主GPU信息，用torch.cuda.is_available</description>
    </item>
    
  </channel>
</rss>